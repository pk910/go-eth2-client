// Code generated by fastssz. DO NOT EDIT.
// Hash: 3a9a3226e05c9a4f4fe19244999dacfbc39962ae1ff5d0ae99f7634afef8ea5c
// Version: 0.1.3
package electra

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionRequests object
func (e *ExecutionRequests) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionRequests object to a target array
func (e *ExecutionRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'DepositRequests'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.DepositRequests) * 192

	// Offset (1) 'WithdrawalRequests'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.WithdrawalRequests) * 76

	// Offset (2) 'ConsolidationRequests'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ConsolidationRequests) * 116

	// Field (0) 'DepositRequests'
	if size := len(e.DepositRequests); size > 8192 {
		err = ssz.ErrListTooBigFn("ExecutionRequests.DepositRequests", size, 8192)
		return
	}
	for ii := 0; ii < len(e.DepositRequests); ii++ {
		if dst, err = e.DepositRequests[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'WithdrawalRequests'
	if size := len(e.WithdrawalRequests); size > 16 {
		err = ssz.ErrListTooBigFn("ExecutionRequests.WithdrawalRequests", size, 16)
		return
	}
	for ii := 0; ii < len(e.WithdrawalRequests); ii++ {
		if dst, err = e.WithdrawalRequests[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'ConsolidationRequests'
	if size := len(e.ConsolidationRequests); size > 1 {
		err = ssz.ErrListTooBigFn("ExecutionRequests.ConsolidationRequests", size, 1)
		return
	}
	for ii := 0; ii < len(e.ConsolidationRequests); ii++ {
		if dst, err = e.ConsolidationRequests[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionRequests object
func (e *ExecutionRequests) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'DepositRequests'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'WithdrawalRequests'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'ConsolidationRequests'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'DepositRequests'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 192, 8192)
		if err != nil {
			return err
		}
		e.DepositRequests = make([]*DepositRequest, num)
		for ii := 0; ii < num; ii++ {
			if e.DepositRequests[ii] == nil {
				e.DepositRequests[ii] = new(DepositRequest)
			}
			if err = e.DepositRequests[ii].UnmarshalSSZ(buf[ii*192 : (ii+1)*192]); err != nil {
				return err
			}
		}
	}

	// Field (1) 'WithdrawalRequests'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 76, 16)
		if err != nil {
			return err
		}
		e.WithdrawalRequests = make([]*WithdrawalRequest, num)
		for ii := 0; ii < num; ii++ {
			if e.WithdrawalRequests[ii] == nil {
				e.WithdrawalRequests[ii] = new(WithdrawalRequest)
			}
			if err = e.WithdrawalRequests[ii].UnmarshalSSZ(buf[ii*76 : (ii+1)*76]); err != nil {
				return err
			}
		}
	}

	// Field (2) 'ConsolidationRequests'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 116, 1)
		if err != nil {
			return err
		}
		e.ConsolidationRequests = make([]*ConsolidationRequest, num)
		for ii := 0; ii < num; ii++ {
			if e.ConsolidationRequests[ii] == nil {
				e.ConsolidationRequests[ii] = new(ConsolidationRequest)
			}
			if err = e.ConsolidationRequests[ii].UnmarshalSSZ(buf[ii*116 : (ii+1)*116]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionRequests object
func (e *ExecutionRequests) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'DepositRequests'
	size += len(e.DepositRequests) * 192

	// Field (1) 'WithdrawalRequests'
	size += len(e.WithdrawalRequests) * 76

	// Field (2) 'ConsolidationRequests'
	size += len(e.ConsolidationRequests) * 116

	return
}

// HashTreeRoot ssz hashes the ExecutionRequests object
func (e *ExecutionRequests) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionRequests object with a hasher
func (e *ExecutionRequests) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'DepositRequests'
	{
		subIndx := hh.Index()
		num := uint64(len(e.DepositRequests))
		if num > 8192 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.DepositRequests {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 8192)
	}

	// Field (1) 'WithdrawalRequests'
	{
		subIndx := hh.Index()
		num := uint64(len(e.WithdrawalRequests))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.WithdrawalRequests {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (2) 'ConsolidationRequests'
	{
		subIndx := hh.Index()
		num := uint64(len(e.ConsolidationRequests))
		if num > 1 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.ConsolidationRequests {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExecutionRequests object
func (e *ExecutionRequests) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
